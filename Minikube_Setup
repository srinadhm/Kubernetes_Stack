CPU Requirements
cpus --- 2
Instance type --- t2.medium

1.Install docker:

amazon-linux-extras install docker -y
service docker start

2.Minikube setup:

curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
chmod +x minikube
sudo mv minikube /usr/local/bin/
yum install conntrack -y
export PATH=/usr/local/bin:$PATH
minikube start --driver=none
minikube version --short

3.To interact with Kubernetes cluster install kubectl (kube client)

curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.20.4/2021-04-12/bin/linux/amd64/kubectl
chmod +x ./kubectl
mkdir -p $HOME/bin
cp ./kubectl $HOME/bin/kubectl
export PATH=$HOME/bin:$PATH
echo 'export PATH=$HOME/bin:$PATH' >> ~/.bashrc
source $HOME/.bashrc
kubectl version --short --client

curl -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.14.6/2019-08-22/bin/linux/amd64/kubectl
chmod +x ./kubectl
mkdir -p $HOME/bin
cp ./kubectl $HOME/bin/kubectl
export PATH=$HOME/bin:$PATH
echo 'export PATH=$HOME/bin:$PATH' >> ~/.bashrc
source $HOME/.bashrc
kubectl version --short --client

Once minikube and kubectl is installed, minikube setup is done

#Check the nodes
[root@ip-172-31-17-62 ~]# kubectl get nodes
NAME                           STATUS   ROLES                  AGE     VERSION
ip-172-31-17-62.ec2.internal   Ready    control-plane,master   3m55s   v1.22.3

#Check the namespaces

[root@ip-172-31-17-62 ~]# kubectl get namespaces
NAME              STATUS   AGE
default           Active   5m59s
kube-node-lease   Active   6m1s
kube-public       Active   6m1s
kube-system       Active   6m1s


Without Manifest Yaml files also we can create/deploy docker images in k8s using kind deployment object/workload 

kubectl create deployment --image=nginx nginx-deployment 
[root@ip-172-31-17-62 ~]# kubectl get deployments
NAME               READY   UP-TO-DATE   AVAILABLE   AGE
nginx-deployment   1/1     1            1           11s

(or)

[root@ip-172-31-17-62 ~]# kubectl get deploy
NAME               READY   UP-TO-DATE   AVAILABLE   AGE
nginx-deployment   1/1     1            1           39s

Delete Deployment

[root@ip-172-31-17-62 ~]# kubectl delete deployment nginx-deployment
deployment.apps "nginx-deployment" deleted

If we create any kubernetes object like deployment,replication controller,replicaset internally it will assume as pod only (pod is the smallest execution unit in Kubernetes. A pod encapsulates one or more applications.)

[root@ip-172-31-17-62 ~]# kubectl get pods
NAME                                READY   STATUS    RESTARTS   AGE
nginx-deployment-84cd76b964-6dkpd   1/1     Running   0          2m4s

                               (or)
 [root@ip-172-31-17-62 ~]# kubectl get po
NAME                                READY   STATUS    RESTARTS   AGE
nginx-deployment-84cd76b964-f4nzq   1/1     Running   0          74s

To access any application/container outside the instance we need to create a service

types of services
1.clusterip : Exposes the service on a cluster-internal IP. Choosing this value makes the service only reachable from within the cluster.
ClusterIP is the default kubernetes service. This service is created inside a cluster and can only be accessed by other pods in that cluster. 
So basically we use this type of service when we want to expose a service to other pods within the same cluster.This service is accessed using kubernetes proxy.      
2.Nodeport : NodePort opens a specific port on each node of the cluster and traffic on that node is forwarded directly to the service.
There are a few limitations and hence its not advised to use NodePort
- only one service per port
- You can only use ports 30000-32767
- Dealing with changing node/VM IP is difficult
3.LoadBalancer:
This is the standard way to expose service to the internet. All the traffic on the port is forwarded to the service. 
It's designed to assign an external IP to act as a load balancer for the service.  
There's no filtering, no routing. LoadBalancer uses cloud service
Few limitations with LoadBalancer:
- every service exposed will it's own ip address 
- It gets very expensive 


# expose a port through with a service

kubectl expose deployment nginx-deployment  --port=80 --name=nginx-service --type NodePort

[root@ip-172-31-17-62 ~]# kubectl get svc
NAME            TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE
kubernetes      ClusterIP   10.96.0.1        <none>        443/TCP        23m
nginx-service   NodePort    10.103.214.171   <none>        80:30958/TCP   7s

Accessing Node port allow 30958 in security group

Ec2 Instance IP:30958

http://54.204.240.57:30958/ (30958 is port forward )

Accessing ClusterIP Service (we cant access clusterip service from outside)

ClusterIP:80

[root@ip-172-31-17-62 ~]# curl 10.103.214.171:80
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
html { color-scheme: light dark; }
body { width: 35em; margin: 0 auto;
font-family: Tahoma, Verdana, Arial, sans-serif; }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>

-------------------

Kubectl command to create jenkins deployment

kubectl create deployment jenkins-deployment --image=jenkins/jenkins:lts

[root@ip-172-31-17-62 ~]# kubectl get deploy
NAME                 READY   UP-TO-DATE   AVAILABLE   AGE
jenkins-deployment   1/1     1            1           2m51s
nginx-deployment     1/1     1            1           26m

[root@ip-172-31-17-62 ~]# kubectl get pods
NAME                                  READY   STATUS    RESTARTS   AGE
jenkins-deployment-66bb49cf58-lxmxq   1/1     Running   0          3m5s
nginx-deployment-84cd76b964-f4nzq     1/1     Running   0          27m

kubectl expose deployment jenkins-deployment  --port=8080 --name=jenkins-service --type NodePort

service/jenkins-service exposed

[root@ip-172-31-17-62 ~]# kubectl get svc or kubectl get services
NAME              TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE
jenkins-service   NodePort    10.98.58.32      <none>        8080:31348/TCP   43s
kubernetes        ClusterIP   10.96.0.1        <none>        443/TCP          47m
nginx-service     NodePort    10.103.214.171   <none>        80:30958/TCP     23m

Jenkins service is created, and nodeport is exposed 31348 port for external access allow 31348 in security group

For jenkins login we need username but that is not running in local ec2 instance, it is in k8s cluster under that it is running pod 

to get the password we need to connect to the pod and get the password for jenkins

[root@ip-172-31-17-62 ~]# kubectl get po
NAME                                  READY   STATUS    RESTARTS   AGE
jenkins-deployment-66bb49cf58-lxmxq   1/1     Running   0          14m
nginx-deployment-84cd76b964-f4nzq     1/1     Running   0          38m
[root@ip-172-31-17-62 ~]# kubectl exec -it jenkins-deployment-66bb49cf58-lxmxq /bin/bash or kubectl exec -it jenkins-deployment-66bb49cf58-lxmxq bash
kubectl exec [POD] [COMMAND] is DEPRECATED and will be removed in a future version. Use kubectl exec [POD] -- [COMMAND] instead.
jenkins@jenkins-deployment-66bb49cf58-lxmxq:/$ ls
bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
jenkins@jenkins-deployment-66bb49cf58-lxmxq:/$ cat /var/jenkins_home/secrets/initialAdminPassword
a0b2d370e57a4a25bfcb0e7041e6bed7
jenkins@jenkins-deployment-66bb49cf58-lxmxq:/$

####Delete Deployment (if we delete deployment automatically pods will be deleted)

[root@ip-172-31-17-62 ~]# kubectl delete  deployment nginx-deployment jenkins-deployment
deployment.apps "nginx-deployment" deleted
deployment.apps "jenkins-deployment" deleted

#####Delete Service 

[root@ip-172-31-17-62 ~]# kubectl delete  svc nginx-service jenkins-service
service "nginx-service" deleted
service "jenkins-service" deleted

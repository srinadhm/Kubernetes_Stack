#Create Deployment using kubectl commands 

kubectl create deployment --image=cloudtechmasters/realtime-project-demo:1 springboot-app

#Expose deployment for service with nodeport for outside accessibility

kubectl expose deployment  springboot-app --port=8888 --name=springboot-service --type=NodePort


service/springboot-service exposed
[root@ip-172-31-24-164 ~]# kubectl get svc
NAME                 TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE
kubernetes           ClusterIP   10.96.0.1        <none>        443/TCP          14m
springboot-service   NodePort    10.105.183.239   <none>        8888:31292/TCP   36s
[root@ip-172-31-24-164 ~]# curl 10.105.183.239:8888/health
App is up and running healthy!
[root@ip-172-31-24-164 ~]# curl 10.105.183.239:8888/getAllCustomers
[{"customerId":100,"customerName":"vamsikrm"},{"customerId":200,"customerName":"harsha"}]

Within the cluster we can use clusterIp and actual port in which application is running

curl 10.105.183.239:8888/health

Outside the cluster we can use nodeIp and forwaded port number which is 31292 allow 31292 under security groups

54.144.71.40:31292/getAllCustomers

In realtime instead of using kubectl commands for creating deployment and service we will write manifest(yaml) files for deployment and service 

#Delete deployment 

kubectl delete deployment springboot-app

#Delete Service 

kubectl delete service springboot-service

####Springboot-Deployment yaml file 

apiVersion: apps/v1
kind: Deployment
metadata:
  name: springboot-deployment
  labels:
    app: springboot
spec:
  replicas: 3
  selector:
    matchLabels:
      app: springboot
  template:
    metadata:
      labels:
        app: springboot
    spec:
      containers:
      - name: springboot
        image: cloudtechmasters/realtime-project-demo:1
        ports:
        - containerPort: 8888

kubectl apply -f springboot-deployment.yaml

####Springboot-service.yaml file

apiVersion: v1
kind: Service
metadata:
  name: springboot-service
spec:
  selector:
    app: springboot
  ports:
    - protocol: TCP
      port: 8888
      targetPort: 8888
      nodePort: 32698
  type: NodePort
  
 kubectl apply -f springboot-service.yaml
 
 Instead of writing yaml files separately and calling individually we can create helm charts and organize structure and run all yaml files with single command
 
 what is helm?
 
 helm is a tool that streamlines installing and managing k8s applications
we can compare helm like apt/yum/homebrew 
helm uses a package format called charts
a chart is a collection of files that describe a related set of k8s resources

Helm installation
#############

[root@ip-172-31-24-164 ~]# curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 > get_helm.sh
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 11156  100 11156    0     0   631k      0 --:--:-- --:--:-- --:--:--  640k
[root@ip-172-31-24-164 ~]# chmod 700 get_helm.sh
[root@ip-172-31-24-164 ~]# ./get_helm.sh
Downloading https://get.helm.sh/helm-v3.7.2-linux-amd64.tar.gz
Verifying checksum... Done.
Preparing to install helm into /usr/local/bin
helm installed into /usr/local/bin/helm

If path is not set or found 

export PATH=$PATH:/usr/local/bin

## Command to check Helm version

helm version
version.BuildInfo{Version:"v3.7.2", GitCommit:"663a896f4a815053445eec4153677ddc24a0a361", GitTreeState:"clean", GoVersion:"go1.16.10"}

####Create helm chart

helm create myfirst-chart

[root@ip-172-31-24-239 myfirst-chart]# ll
total 8
drwxr-xr-x 2 root root    6 Jan 22 05:23 charts
-rw-r--r-- 1 root root 1149 Jan 22 05:23 Chart.yaml
drwxr-xr-x 3 root root  162 Jan 22 05:23 templates
-rw-r--r-- 1 root root 1880 Jan 22 05:23 values.yaml

In values.yaml we can mention service type like clusterIp & NodePort and Docker Image, Replicas 

cat values.yaml
# Default values for myfirst-chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 3

image:
  repository: cloudtechmasters/realtime-project-demo
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "1"

service:
  type: NodePort
  port: 32978

If we want to mention/refer labels or selector labels or metadata annotations for deployment and service k8s resources instead of writing everytime we can use named templates in 
helm.Define in _helpers.tpl and use Include to refer in deployment yaml file.

cat _helpers.tpl

Common labels
*/}}
{{- define "myfirst-chart.labels" -}}
helm.sh/chart: {{ include "myfirst-chart.chart" . }}

cat deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "myfirst-chart.fullname" . }}
  labels:
    {{- include "myfirst-chart.labels" . | nindent 4 }}


Similar to these we can have named templates for labels,selectors,chart,service account.

In Deployment yaml file change the containerPort value which we used in application and image name comes from values.yaml file .
For templates/service.yaml service type and service port comes values.yaml file.

After making changes we can check what are the values updated through template 

helm template myfirst-chart

[root@ip-172-31-24-239 ~]# helm template myfirst-chart
---
# Source: myfirst-chart/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-myfirst-chart
  labels:
    helm.sh/chart: myfirst-chart-0.1.0
    app.kubernetes.io/name: myfirst-chart
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: NodePort
  ports:
    - port: 32978
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: myfirst-chart
    app.kubernetes.io/instance: RELEASE-NAME
---
# Source: myfirst-chart/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: RELEASE-NAME-myfirst-chart
  labels:
    helm.sh/chart: myfirst-chart-0.1.0
    app.kubernetes.io/name: myfirst-chart
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: myfirst-chart
      app.kubernetes.io/instance: RELEASE-NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: myfirst-chart
        app.kubernetes.io/instance: RELEASE-NAME
    spec:
      containers:
        - name: myfirst-chart
          securityContext:
            null
          image: "cloudtechmasters/realtime-project-demo:1"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8888
              protocol: TCP
---
# Source: myfirst-chart/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "RELEASE-NAME-myfirst-chart-test-connection"
  labels:
    helm.sh/chart: myfirst-chart-0.1.0
    app.kubernetes.io/name: myfirst-chart
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['RELEASE-NAME-myfirst-chart:32978']
  restartPolicy: Never


######Install helm chart 

helm install <projectname> <chartname>

[root@ip-172-31-24-239 ~]# helm install myspringbootapp myfirst-chart
NAME: myspringbootapp
LAST DEPLOYED: Sat Jan 22 06:26:58 2022
NAMESPACE: default
STATUS: deployed
REVISION: 1

#####List helm releases for a particular namespace

[root@ip-172-31-24-239 ~]# helm ls
NAME            NAMESPACE       REVISION        UPDATED                                 STATUS          CHART                   APP VERSION
myspringbootapp default         1               2022-01-22 06:26:58.77997364 +0000 UTC  deployed        myfirst-chart-0.1.0     1.16.0

